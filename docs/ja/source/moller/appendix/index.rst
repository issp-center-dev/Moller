================================================================
拡張ガイド
================================================================

mollerによるバルク実行
----------------------------------------------------------------

バルク実行とは、大型のバッチキューに投入した一つのバッチジョブの中で、複数の小さいタスクを並行して実行するというものです。動作のイメージとしては、次のようにN個のタスクをバックグラウンドで実行し同時に処理させ、wait文によりすべてのタスクが終了するまで待ちます。

.. code-block:: bash

    task param_1 &
    task param_2 &
         ...
    task param_N &
    wait

このとき、バッチジョブに割り当てられたノード・コアを適宜分配し、param_1〜param_N のタスクがそれぞれ別のノード・コアで実行されるように配置する必要があります。また、多数のタスクがある時に、割当てリソースに応じて最大N個のタスクが実行されるよう実行を調整することも必要です。

moller で生成したジョブスクリプトを以下では moller scriptと呼ぶことにします。
moller script では、タスクの並行実行と制御には GNU parallel [1]を利用します。GNU parallel は param_1〜param_N のリストを受取り、これらを引数としてコマンドを並行して実行するツールです。同時実行数については、バッチジョブに割当てられたノード数・コア数を実行時に環境変数等から取得し、各タスクの並列度(ノード数・プロセス数・スレッド数)の指定(nodeパラメータ)を元に計算します。

ノード・コアへのタスクの配置についてはジョブスケジューラによって方法が異なります。SLURM系のジョブスケジューラでは、リソースの排他利用のオプションを使うことで、バッチジョブ内部で発行された複数の srun をジョブスケジューラが適宜配置して実行します。具体的な指定方法はプラットフォームの設定に依存します。

一方、PBS系のジョブスケジューラはそのような仕組みがなく、リソースの配分をmoller script内部で処理する必要があります。moller scriptでは、バッチジョブに割り当てられた計算ノードとコアをスロットに分割し、GNU parallel で並行処理されるタスクに分配します。スロットへの分割は、実行時に取得される割当てノード・コアとタスクの並列度指定から計算し、テーブルの形で保持します。タスク内部では、mpirun (mpiexec) の引数や環境変数を通じて計算ノードの指定と割当コアのピン留めを行いプログラムを実行します。この処理は使用するMPI実装に依存します。

**参考文献**

[1] `O. Tange, GNU Parallel - The command-Line Power Tool, ;login: The USENIX Magazine, February 2011:42-47. <https://www.usenix.org/publications/login/february-2011-volume-36-number-1/gnu-parallel-command-line-power-tool>`_


mollerの動作について
----------------------------------------------------------------

mollerは、入力されたYAMLファイルの内容をもとに、バルク実行のためのジョブスクリプトを生成します。生成されるジョブスクリプトは先頭から順に次のような構成になっています。

#. ヘッダ

   ジョブスケジューラへの指示が記述されます。platform セクションに指定した内容が、ジョブスケジューラの種類に応じた形式に整形されて出力されます。この処理はプラットフォーム依存です。

#. プロローグ

   prologue セクションに指定した内容です。code ブロックの中身がそのまま転記されます。

#. 関数の定義

   ジョブスクリプト内部で使う関数および変数の定義が出力されます。関数の概要については次節で説明します。この箇所はプラットフォーム依存です。

#. コマンドライン引数の処理

   SLURM系のジョブスケジューラでは、リストファイルの指定やタスクの再実行などのオプション指定を sbatch コマンドの引数として与えることができます。PBS系のジョブスケジューラでは引数の指定は無視されるため、オプション指定はジョブスクリプトを編集してパラメータをセットする必要があります。

#. タスクの記述

   jobs セクションに記述されるタスクの内容を出力します。タスクが複数ある場合はタスクごとに以下の処理を実行します。

     parallel = false の場合は run ブロックの中身がそのまま転記されます。

     parallel = true (デフォルト) の場合、task_タスク名 という関数が生成され、並列実行のための前処理と run ブロックの内容が出力されます。並列計算のためのキーワード(``srun`` 、 ``mpiexec`` または ``mpirun``)はプラットフォームに応じたコマンドに置き換えられます。関数定義に続いて並列実行のコマンドが書き出されます。

#. エピローグ
     
   epilogue セクションに指定した内容です。code ブロックの中身がそのまま転記されます。


**関数の概要について**

moller script の内部で使用する主な関数の概要を以下に説明します。

- ``run_parallel``

  タスクの内容を記述した関数(タスク関数)を並行実行する関数です。並列度、タスク関数、ステータスファイル名を引数に取ります。内部では ``_find_multiplicity`` 関数を呼んで多重度を計算し、GNU parallel を起動してタスクを並行実行します。GNU parallel の多段処理に対応するために、タスク関数は ``_run_parallel_task`` 関数でラップされます。

  プラットフォーム依存性は ``_find_multiplicity`` および ``_setup_run_parallel`` 関数としてくくり出しています。
  
- ``_find_multiplicity``

  並列実行の多重度を、割当てリソース(ノード数・コア数)とタスクの並列度指定から計算します。PBS系のジョブスケジューラでは、さらに計算ノード・コアをスロットに分割し、テーブルで保持します。
  実行時に環境から取得する情報は次の通りです。

  - SLURM系

     割当てノード数 _nnodes
       ``SLURM_NNODES``

     割当てコア数   _ncores
       ``SLURM_CPUS_ON_NODE``

  - PBS系

     割当てノード _nodes[]
       ``PBS_NODEFILE`` で指定されるファイルから計算ノードのリストを取得

     ノード数     _nnodes
       _nodes[] の項目数

     割当てコア数 _ncores
       以下の順に検索されます。
         - ``NCPUS`` (PBS Professional)
         - ``OMP_NUM_THREADS``
         - platform セクションの core 指定(スクリプト中に moller_core変数として書き込まれる)
         - ヘッダの ncpus または ppn パラメータ

- ``_setup_run_parallel``

  GNU parallel による並行実行を開始する前にいくつか処理を追加するために呼ばれます。PBS系ではスロットに分割されたノード・コアのテーブルをタスク関数から参照できるよう export します。SLURM系では実行する内容はありません。
  

各タスクに対応するタスク関数の構成については次の通りです。

- タスク関数の引数は 1) 並列度指定(ノード数・プロセス数・スレッド数) 2) 実行ディレクトリ 3) GNU parallel のスロットID です。

- ``_setup_taskenv`` で実行環境の設定を行います。この関数はプラットフォーム依存です。PBS系ではスロットIDに基づいて計算ノード・コアをテーブルから取得します。SLURM系では実行する内容はありません。

- 直前に実行するタスクが正常終了したかどうかを ``_is_ready`` 関数を呼んでチェックします。正常終了している場合はタスクの処理を継続します。それ以外の場合は -1 のステータスでタスクの処理を中断します。

- code ブロックの内容を転記します。その際に、並列計算のためのキーワード(``srun`` 、 ``mpiexec`` または ``mpirun``)はプラットフォームに応じたコマンドに置き換えられます。


mollerを他のシステムで使うには
----------------------------------------------------------------

(以下の内容はmollerのバージョンによって変わる可能性があります。)

